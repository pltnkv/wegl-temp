{"mappings":"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B;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QACxC,aAAa,CAAC,iBAAiB;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAExC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QAEzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QAEzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QAEzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QAEzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAAE,CAAC;QAAE,CAAC;QACzC,aAAa,CAAC,iBAAiB;QAAE,EAAE;QAA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","sources":["src/index.ts"],"sourcesContent":["const MAX_VERTICES = 200000; // this is the maximum amount of vertices we can address without switching vertex buffer\nconst MAX_TRIANGLES = MAX_VERTICES; // lets just say one triangle have at least 1 unique vertex (quite a stretch actually)\nconst MAX_INDICES = MAX_TRIANGLES * 3; // but each triangle will still have 3 indices\n\ntype ImageSource = HTMLImageElement | HTMLCanvasElement | ImageData\n\nenum PrimitiveType {\n    TRIANGLE_WITH_COLOR = 1,\n    IMAGE = 2,\n    RENDER_TO_TEXTURE = 3\n}\n\nconst MONSTER_SHADER_ATTRIBUTES = \n[\n    {\n        name: 'slot1',\n        size: 4,\n    },\n    {\n        name: 'slot2',\n        size: 4\n    }\n]\n\n// stride for vertex buffer, this is the maximum highest amount used by any shader included in monster shader\n\nconst STRIDE_IN_FLOATS = MONSTER_SHADER_ATTRIBUTES.reduce((acum, entry) => acum + entry.size, 0);\nconst STRIDE_IN_BYTES = STRIDE_IN_FLOATS * Float32Array.BYTES_PER_ELEMENT;\n\n// here we just setting up canvas get a webgl context and some extentions\nlet canvas: HTMLCanvasElement;\nlet gl: WebGLRenderingContext;\n\nlet monsterShader;\nlet dummyTexture\n\n// text generation\nconst textCanvas = document.createElement('canvas')\ntextCanvas.width = 1024;\ntextCanvas.height = 1024;\nconst textContext = textCanvas.getContext('2d')\n\nlet cameraX = 0, cameraY = 0\nlet scale = 1\nconst view = new Float32Array(4) // x, y, sx, sy\n\nlet ATLAS_SIZE\n\nconst SHAPE_STAR = [\n    119.96963500976562, 194.0947265625,\n    47.98785400390625, 242.618408203125,\n    59.98481750488281, 152.84959716796874,\n    0, 92.1949951171875,\n    83.97874450683594, 80.06407470703125,\n    119.96963500976562, 0,\n    155.9605255126953, 80.06407470703125,\n    239.93927001953125, 92.1949951171875,\n    179.95445251464844, 152.84959716796874,\n    191.951416015625, 242.618408203125,\n    119.96963500976562, 194.0947265625,\n    119.96963500976562, 194.0947265625,\n]\n\ntype Atlas = {\n    texture: WebGLTexture\n    frameBuffer: WebGLFramebuffer\n    shelf: any\n    renderInCount: number\n}\n\ntype Bin = {\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\ntype SpaceInAtlas = {\n    atlas: Atlas\n    space: Bin\n}\n\ntype DrawCall = {\n    indexCount: number\n    textures: WebGLTexture[]\n}\n\ntype DrawCallBuffer = {\n    vertexBuffer: WebGLBuffer\n    texIdBuffer: WebGLBuffer\n    indexBuffer: WebGLBuffer\n\n    vertexBufferRAM: Float32Array\n    texIdBufferRAM: Float32Array\n    indexBufferRAM: Uint32Array\n\n    atlases: Atlas[]\n    \n    nextVertexIndex: number\n    nextIndexIndex: number\n\n    drawCalls: DrawCall[]\n}\n\nconst buffers = [] as DrawCallBuffer[] // vertex buffer + index buffer goes here\nlet debugTextureWithoutAtlasesMemoryCount: number = 0\n\nlet atlasQuads: WebGLBuffer\nlet atlasQuadsDestUVs: WebGLBuffer\nlet atlasQuadsDestUVsBuffer: Float32Array;\nlet atlasQuadsIndices: WebGLBuffer\n\n// fps output\nlet lastFrameTimestamp = 0;\nconst fpsElement = document.getElementById(\"fps\");\n\ninitRand();\nsetupCanvas();\nsetupWebGL();\nsetupShaders();\nsetupAtlasRenderer();\nfillBuffer();\n\nfunction setupCanvas() {\n    canvas = document.getElementById(\"scene\") as HTMLCanvasElement;\n\n    const dpr = window.devicePixelRatio;\n    const screenWidth = document.body.clientWidth;\n    const screenHeight = document.body.clientHeight;\n\n    canvas.width = screenWidth * dpr;\n    canvas.height = screenHeight * dpr;\n\n    canvas.style.width = screenWidth + \"px\";\n    canvas.style.height = screenHeight + \"px\";\n\n    canvas.onmousedown = controls_mousedown;\n    canvas.onmouseup = controls_mouseup;\n    canvas.onmousemove = controls_mousemove;\n    canvas.onwheel = controls_wheel;\n}\n\nfunction setupWebGL() {\n    gl = (canvas.getContext(\"webgl\", {\n        alpha: true,\n        premultipliedAlpha: false,\n        stencil: false,\n        depth: false,\n        antialias: false,\n        powerPreference: \"low-power\",\n    }));\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#understand_extension_availability\n    gl.getExtension('OES_element_index_uint')\n    ATLAS_SIZE = 4096;\n\n    gl.viewport(0.0, 0.0, canvas.width, canvas.height);\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    gl.enable(gl.BLEND);\n\n    gl.clearColor(0.3, 0.55, 0.9, 1);\n}\n\nfunction setupAtlasRenderer() {\n    const atlasQuadsBuffer = new Float32Array([\n        PrimitiveType.RENDER_TO_TEXTURE, 1, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 1, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 1, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 1, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 2, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 2, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 2, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 2, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 3, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 3, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 3, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 3, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 4, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 4, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 4, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 4, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 5, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 5, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 5, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 5, 1, 1,\n        \n        PrimitiveType.RENDER_TO_TEXTURE, 6, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 6, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 6, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 6, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 7, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 7, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 7, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 7, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 8, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 8, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 8, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 8, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 9, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 9, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 9, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 9, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 10, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 10, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 10, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 10, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 11, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 11, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 11, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 11, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 12, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 12, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 12, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 12, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 13, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 13, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 13, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 13, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 14, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 14, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 14, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 14, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 15, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 15, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 15, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 15, 1, 1,\n\n        PrimitiveType.RENDER_TO_TEXTURE, 16, 0, 0, \n        PrimitiveType.RENDER_TO_TEXTURE, 16, 1, 0,\n        PrimitiveType.RENDER_TO_TEXTURE, 16, 0, 1,\n        PrimitiveType.RENDER_TO_TEXTURE, 16, 1, 1,\n    ])\n\n    atlasQuads = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, atlasQuads)\n    gl.bufferData(gl.ARRAY_BUFFER, atlasQuadsBuffer, gl.STATIC_DRAW)\n\n    atlasQuadsDestUVs = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, atlasQuadsDestUVs)\n    gl.bufferData(gl.ARRAY_BUFFER, 16 * (4 * 4) * Float32Array.BYTES_PER_ELEMENT, gl.DYNAMIC_DRAW);\n    atlasQuadsDestUVsBuffer = new Float32Array(16 * (4 * 4));\n\n    atlasQuadsIndices = gl.createBuffer()\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, atlasQuadsIndices)\n    const indices = new Uint16Array(16 * 6);\n    let j = 0;\n    for (let i = 0; i < indices.length; i += 6) {\n        indices[i + 0] = j + 0;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n\n        indices[i + 3] = j + 1;\n        indices[i + 4] = j + 2;\n        indices[i + 5] = j + 3;\n\n        j += 4;\n    }\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n}\n\nfunction fillTexturesWithDummy(offset = 0) {\n    for (let i = offset; i < 16; i++) {\n        gl.activeTexture(gl.TEXTURE0 + i);\n        gl.bindTexture(gl.TEXTURE_2D, dummyTexture);\n    }\n}\n\nfunction setupShaders() {\n    monsterShader = compileShader(\n        \"monster\",\n        [\"view\", 'textures', 'views'],\n        ['texId'].concat(MONSTER_SHADER_ATTRIBUTES.map(entry => entry.name))\n    );\n    monsterShader.use();\n    gl.uniform1iv(monsterShader.textures, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n\n    dummyTexture = gl.createTexture()\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, dummyTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, undefined)\n\n    fillTexturesWithDummy()\n}\n\n// this function give coordinates to place quads in a grid\nfunction getRectByNum(num, max_rects) {\n    const quads_in_a_row = Math.floor(Math.sqrt(max_rects));\n\n    const screen_padding = 0.15;\n\n    const length = 2 - screen_padding * 2;\n    const quad_size = length / quads_in_a_row;\n    const padding = quad_size * 0.05;\n\n    const x_num = num % quads_in_a_row;\n    const y_num = Math.floor(num / quads_in_a_row);\n\n    return {\n        x: -1 + screen_padding + x_num * quad_size,\n        y: -1 + screen_padding + y_num * quad_size,\n        width: quad_size - padding,\n        height: quad_size - padding,\n    };\n}\n\nfunction loadImage(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.onload = () => {\n            resolve(img)\n        }\n        img.onerror = () => reject(url);\n        img.src = url;\n    })\n}\n\nfunction getElementsPositionsWithoutIntersections(elements) {\n    const positions = []\n\n    let dist = 50;\n    for (const element of elements) {\n        const angle = dist / 25\n        const s = Math.sin(angle)\n        const c = Math.cos(angle)\n\n        const x = s * dist;\n        const y = c * dist;\n\n        positions.push({\n            x: canvas.width / 2 + x, \n            y: canvas.height / 2 + y,\n            width: element.width,\n            height: element.height,\n        });\n\n        dist += 5000 / dist\n    }\n\n    return positions;\n}\n\nfunction getTextSizeInPixels(text: string, font: string) {\n    textContext.font = font;\n    const measures = textContext.measureText(text)\n\n    const width = measures.width;\n    const height = measures.fontBoundingBoxAscent + measures.fontBoundingBoxDescent;\n\n    return {\n        width,\n        height\n    }\n}\n\nfunction generateRandomText(): string {\n    const n1 = Math.round(randomRange(0, 9))\n    const n2 = Math.round(randomRange(0, 9))\n    const n3 = Math.round(randomRange(0, 9))\n    const n4 = Math.round(randomRange(0, 9))\n    const n5 = Math.round(randomRange(0, 9))\n\n    return `${n1}M${n2}I${n3}R${n4}O${n5}`\n}\n\nfunction renderText(text: string, font: string, color: string, size) {\n    textContext.font = font;\n    textContext.fillStyle = color;\n    textContext.textAlign = 'left';\n    textContext.textBaseline = 'top'\n    textContext.clearRect(0, 0, size.width, size.height)\n    textContext.fillText(text, 0, 0);\n    const data = textContext.getImageData(0, 0, size.width, size.height)\n    return data\n}\n\nfunction getShapeSize(points: number[]) {\n    let width = 0;\n    let height = 0;\n\n    for (let i = 0; i < points.length; i += 2) {\n        const x = points[i + 0]\n        const y = points[i + 1]\n\n        width = Math.max(width, x);\n        height = Math.max(height, y);\n    }\n\n    return {\n        width,\n        height\n    }\n}\n\n// here we create our quads using current placing plan\nasync function fillBuffer() {\n    const shapes = []\n\n    const shapeSize = getShapeSize(SHAPE_STAR);\n    for (let i = 0; i < 30000; i++) {\n        shapes.push({\n            width: shapeSize.width,\n            height: shapeSize.height,\n            shape: SHAPE_STAR,\n            color: {\n                r: randomRange(0, 1),\n                g: randomRange(0, 1),\n                b: randomRange(0, 1),\n                a: randomRange(0.2, 0.8)\n            }\n        })\n    }\n\n    const lines = []\n    for (let i = 0; i < 30000; i++) {\n        const width = randomRange(10, 500)\n        const height = randomRange(10, 500)\n\n        lines.push({\n            width,\n            height,\n            line: {\n                width: randomRange(5, 50),\n            },\n            color: {\n                r: randomRange(0, 1),\n                g: randomRange(0, 1),\n                b: randomRange(0, 1),\n                a: randomRange(0.2, 0.8)\n            }\n        })\n    }\n\n    console.time('text rendering')\n\n    const texts = []\n    for (let i = 0; i < 1000; i++) {\n        const font = `${Math.round(randomRange(8, 128))}px Arial`\n        const text = generateRandomText()\n        const size = getTextSizeInPixels(text, font);\n        const texture = renderText(text, font, '#000000', size);\n        texts.push({\n            width: size.width,\n            height: size.height,\n            texture\n        })\n    }\n    console.timeEnd('text rendering')\n\n    const promises = []\n    for (let i = 1; i <= 1000; i++) {\n        promises.push(loadImage(`images/${i}.jpg`))\n    }\n    const images = await Promise.all(promises)\n\n    const combination = [].concat(texts, images, shapes, lines);\n    for (let i = combination.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = combination[i];\n        combination[i] = combination[j];\n        combination[j] = temp;\n    }\n    const randomCombination = combination;\n\n    const positions = getElementsPositionsWithoutIntersections(randomCombination)\n\n    for (let i = 0; i < randomCombination.length; i++) {\n        const element = randomCombination[i]\n        const pos = positions[i]\n        if (element.line) {\n            addLine([pos.x, pos.y, pos.x + element.width, pos.y + element.height], \n                element.line.width, element.line.width,\n                element.color.r, element.color.g, element.color.b, element.color.a);\n        } else if (element.shape) {\n            addShape(SHAPE_STAR, pos.x, pos.y, \n                element.color.r, element.color.g, element.color.b, element.color.a);\n        } else {\n            addImage(pos.x, pos.y, element.width, element.height, element.texture || element);\n        }\n    }\n}\n\nfunction outputMemoryAndFPS(timestamp) {\n    let memory = 0;\n    for (const buffer of buffers) {\n        memory += buffer.atlases.length * (ATLAS_SIZE * ATLAS_SIZE * 4)\n    }\n\n    const wastedPercent = memory > 0 ? Math.round((1 - (debugTextureWithoutAtlasesMemoryCount / memory)) * 100) : 0;\n    const atlasMB = Math.round(memory / (1024 * 1024))\n\n    const fps = Math.round(1000 / (timestamp - lastFrameTimestamp))\n    lastFrameTimestamp = timestamp;\n\n    fpsElement.textContent = `${atlasMB} MB fot Atlases, ${wastedPercent}% wasted, FPS: ${fps}`;\n}\n\nfunction updateCamera() {\n    view[0] = -canvas.width / 2 - cameraX\n    view[1] = -canvas.height / 2 - cameraY\n    view[2] =  1 / (canvas.width / 2 / scale)\n    view[3] = -1 / (canvas.height / 2 / scale)\n\n    gl.uniform4fv(monsterShader.view, view);\n}\n\nfunction addPrimitiveVertices(primitiveType: PrimitiveType, data: number[], strideInFloats: number,\n    indices: number[], image?: ImageSource, uvIndexes?: number[]) {\n    const strideInFloatsWithType = strideInFloats + 1\n    if (strideInFloatsWithType > STRIDE_IN_FLOATS) {\n        throw new Error(\"Not enough attribute slots.\")\n    }\n    if (data.length % strideInFloats !== 0) {\n        throw new Error(\"Data is not aligned with stride.\")\n    }\n\n    const vertexCount = data.length / strideInFloats\n    const buffer = getBuffer(vertexCount, indices.length)\n\n    const indexData = new Uint32Array(indices.length)\n    for (let i = 0; i < indices.length; i++) {\n        indexData[i] = buffer.nextVertexIndex + indices[i];\n    }\n\n    const texIdData = new Float32Array(vertexCount)\n    if (image) {\n        if (!uvIndexes) {\n            throw new Error(\"Texture must include UV.\")\n        }\n        const prevAtlasCount = buffer.atlases.length\n        const prevAtlasGroup = Math.trunc(prevAtlasCount / 16)\n\n        const { atlas, space } = getSpaceInAtlas(buffer, image.width, image.height)\n        addRenderToAtlasQueue(atlas, space, image)\n\n        const tx = space.x / ATLAS_SIZE\n        const ty = space.y / ATLAS_SIZE\n\n        const sx = image.width / ATLAS_SIZE\n        const sy = image.height / ATLAS_SIZE\n\n        // transform source uv to atlas uv\n        for (let i = 0; i < vertexCount; i++) {\n            const srcIndex = i * strideInFloats\n\n            data[srcIndex + uvIndexes[0]] = data[srcIndex + uvIndexes[0]] * sx + tx\n            data[srcIndex + uvIndexes[1]] = data[srcIndex + uvIndexes[1]] * sy + ty\n\n            texIdData[i] = 1 + (buffer.atlases.indexOf(atlas) % 16) // hack\n        }\n\n        const currentAtlasCount = buffer.atlases.length\n        const currentAtlasGroup = Math.trunc(currentAtlasCount / 16)\n\n        // ultra hack\n        if (currentAtlasGroup !== prevAtlasGroup) {\n            buffer.drawCalls.push({\n                indexCount: 0,\n                textures: []\n            })\n        }\n        \n        // new atlas? need to push\n        if (currentAtlasCount !== prevAtlasCount) {\n            const lastDrawCall = buffer.drawCalls[buffer.drawCalls.length - 1]\n            lastDrawCall.textures.push(atlas.texture)\n        }\n    }\n\n    const vertexData = new Float32Array(vertexCount * STRIDE_IN_FLOATS)\n    for (let i = 0; i < vertexCount; i++) {\n        const srcIndex = i * strideInFloats\n        const dstIndex = i * STRIDE_IN_FLOATS\n\n        vertexData[dstIndex + 0] = primitiveType\n        for (let j = 0; j < strideInFloats; j++) {\n            vertexData[dstIndex + 1 + j] = data[srcIndex + j]\n        }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer)\n    gl.bufferSubData(gl.ARRAY_BUFFER, buffer.nextVertexIndex * STRIDE_IN_BYTES, vertexData)\n    // buffer.vertexBufferRAM.set(vertexData, buffer.nextVertexIndex * STRIDE_IN_FLOATS);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.texIdBuffer)\n    gl.bufferSubData(gl.ARRAY_BUFFER, buffer.nextVertexIndex * Float32Array.BYTES_PER_ELEMENT, texIdData)\n    // buffer.texIdBufferRAM.set(texIdData, buffer.nextVertexIndex);\n\n    buffer.nextVertexIndex += vertexCount\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indexBuffer)\n    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, buffer.nextIndexIndex * Uint32Array.BYTES_PER_ELEMENT,\n        indexData);\n    // buffer.indexBufferRAM.set(indexData, buffer.nextIndexIndex);\n    buffer.nextIndexIndex += indices.length\n\n    const lastDrawCall = buffer.drawCalls[buffer.drawCalls.length - 1]\n    lastDrawCall.indexCount += indices.length;\n}\n\n// мы говорим - добавь изображение\n// вот т.е. для нас по сути uv это tuv\n// textureId, u, v\n// textureId это id текстуры в текущем блоке отрисовки, т.е. от 0 до 15\n// u, v также нужно апдейтить исходя из места в атласе\n\nfunction addImage(x: number, y: number, width: number, height: number, image: HTMLImageElement) {\n    addPrimitiveVertices(PrimitiveType.IMAGE,\n        [\n            x,         y,          0, 0, 0, 0,\n            x + width, y,          0, 0, 1, 0,\n            x,         y + height, 0, 0, 0, 1,\n            x + width, y + height, 0, 0, 1, 1,\n        ],\n        6,\n        [0, 1, 2, 1, 2, 3],\n        image,\n        [4, 5]\n    );\n}\n\nfunction addLine(coordinates: number[], lineWidthInside: number, lineWidthOutside: number,\n    r: number, g: number, b: number, a: number) {\n    if (coordinates.length % 2 !== 0) {\n        throw new Error('Invalid coordinates.')\n    }\n    const pointsCount = coordinates.length / 2;\n    if (pointsCount < 2) {\n        throw new Error(\"Line should consist of two or more points.\")\n    }\n\n    const vertices = []\n    const indices = []\n\n    let startIndex = 0;\n    for (let i = 0; i < coordinates.length - 2; i += 2) {\n        const x0 = coordinates[i + 0];\n        const y0 = coordinates[i + 1];\n\n        const x1 = coordinates[i + 2];\n        const y1 = coordinates[i + 3];\n\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n\n        const len = Math.sqrt(dx * dx + dy * dy);\n\n        const nx = -dy / len\n        const ny =  dx / len\n\n        vertices.push(\n            x0 + nx * lineWidthOutside, y0 + ny * lineWidthOutside, 0,\n            r, g, b, a,\n\n            x0 - nx * lineWidthInside, y0 - ny * lineWidthInside, 0,\n            r, g, b, a,\n\n            x1 + nx * lineWidthOutside, y1 + ny * lineWidthOutside, 0,\n            r, g, b, a,\n\n            x1 - nx * lineWidthInside, y1 - ny * lineWidthInside, 0,\n            r, g, b, a,\n        )\n\n        indices.push(\n            startIndex + 0,\n            startIndex + 1,\n            startIndex + 2,\n\n            startIndex + 1,\n            startIndex + 2,\n            startIndex + 3,\n        )\n\n        startIndex += 4;\n    }\n\n    addPrimitiveVertices(PrimitiveType.TRIANGLE_WITH_COLOR, vertices, 7, indices);\n}\n\nfunction addShape(points: number[], x: number, y: number, r: number, g: number, b: number, a: number) {\n    const earcut = (window as any).earcut;\n\n    const indices = earcut(points);\n\n    const vertices = [];\n\n    for (let i = 0; i < points.length; i += 2) {\n        const vx = points[i + 0] + x;\n        const vy = points[i + 1] + y;\n\n        vertices.push(vx, vy, 0, r, g, b, a);\n    }\n\n    addPrimitiveVertices(PrimitiveType.TRIANGLE_WITH_COLOR, vertices, 7, indices);\n}\n\nfunction draw(timestamp) {\n    scale *= .999;\n\n    outputMemoryAndFPS(timestamp)\n\n    processAtlasGenerationQueue()\n\n    // filling render target with our blank color\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    updateCamera();\n\n    for (const buffer of buffers) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indexBuffer)\n        describeVertices(buffer.vertexBuffer, buffer.texIdBuffer)\n\n        let offset = 0;\n        for (const drawCall of buffer.drawCalls) {\n            for (let i = 0; i < drawCall.textures.length; i++) {\n                gl.activeTexture(gl.TEXTURE0 + i);\n                gl.bindTexture(gl.TEXTURE_2D, drawCall.textures[i])\n            }\n\n            gl.drawElements(gl.TRIANGLES, drawCall.indexCount, gl.UNSIGNED_INT, offset);\n            offset += drawCall.indexCount * Uint32Array.BYTES_PER_ELEMENT;\n        }\n    }\n\n    requestAnimationFrame(draw);\n}\n\nrequestAnimationFrame(draw);\n\nfunction describeVertices(vertexBuffer: WebGLBuffer, texIdBuffer: WebGLBuffer) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n    let offset = 0\n    for (const attributeDesc of MONSTER_SHADER_ATTRIBUTES) {\n        const attributeIndex = monsterShader[attributeDesc.name]\n        gl.vertexAttribPointer(\n            attributeIndex,\n            attributeDesc.size,\n            gl.FLOAT,\n            false,\n            STRIDE_IN_BYTES,\n            offset * Float32Array.BYTES_PER_ELEMENT\n        );\n        gl.enableVertexAttribArray(attributeIndex);\n        offset += attributeDesc.size\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, texIdBuffer)\n    gl.vertexAttribPointer(\n        monsterShader.texId,\n        1,\n        gl.FLOAT,\n        false,\n        Float32Array.BYTES_PER_ELEMENT,\n        0\n    );\n    gl.enableVertexAttribArray(monsterShader.texId);\n}\n\nfunction describeVerticesForAtlas(quadsBuffer: WebGLBuffer, quadsDestUVsBuffer: WebGLBuffer) {\n    for (const attributeDesc of MONSTER_SHADER_ATTRIBUTES) {\n        const attributeIndex = monsterShader[attributeDesc.name]\n        gl.disableVertexAttribArray(attributeIndex);\n    }\n    gl.disableVertexAttribArray(monsterShader.texId);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, quadsBuffer);\n    gl.vertexAttribPointer(\n        monsterShader.slot1,\n        4,\n        gl.FLOAT,\n        false,\n        4 * Float32Array.BYTES_PER_ELEMENT,\n        0 * Float32Array.BYTES_PER_ELEMENT\n    );\n    gl.enableVertexAttribArray(monsterShader.slot1);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, quadsDestUVsBuffer);\n    gl.vertexAttribPointer(\n        monsterShader.slot2,\n        4,\n        gl.FLOAT,\n        false,\n        4 * Float32Array.BYTES_PER_ELEMENT,\n        0 * Float32Array.BYTES_PER_ELEMENT\n    );\n    gl.enableVertexAttribArray(monsterShader.slot2);\n}\n\nfunction allocBuffer(): DrawCallBuffer {\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(\n        gl.ARRAY_BUFFER,\n        MAX_VERTICES * STRIDE_IN_BYTES,\n        gl.STREAM_DRAW\n    );\n    const vertexBufferRAM = new Float32Array(MAX_VERTICES * STRIDE_IN_FLOATS);\n\n    const texIdBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texIdBuffer);\n    gl.bufferData(\n        gl.ARRAY_BUFFER,\n        MAX_VERTICES * Float32Array.BYTES_PER_ELEMENT,\n        gl.STREAM_DRAW\n    );\n    const texIdBufferRAM = new Float32Array(MAX_VERTICES);\n\n    const indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n    gl.bufferData(\n        gl.ELEMENT_ARRAY_BUFFER,\n        MAX_INDICES * Uint32Array.BYTES_PER_ELEMENT,\n        gl.STREAM_DRAW\n    );\n\n    const indexBufferRAM = new Uint32Array(MAX_INDICES)\n\n    const buffer = {\n        vertexBuffer,\n        texIdBuffer,\n        indexBuffer,\n        vertexBufferRAM,\n        texIdBufferRAM,\n        indexBufferRAM,\n        atlases: [],\n        nextVertexIndex: 0,\n        nextIndexIndex: 0,\n        drawCalls: [\n            {\n                indexCount: 0,\n                textures: []\n            }\n        ]\n    } as DrawCallBuffer\n\n    buffers.push(buffer)\n\n    return buffer\n}\n\nfunction getBuffer(requiredVertices: number, requiredIndices: number): DrawCallBuffer {\n    const lastBuffer = buffers[buffers.length - 1]\n    if (!lastBuffer) {\n        return allocBuffer()\n    }\n    \n    const remainingVertices = MAX_VERTICES - lastBuffer.nextVertexIndex\n    const remainingIndices = MAX_INDICES - lastBuffer.nextIndexIndex\n\n    if (remainingVertices < requiredVertices || remainingIndices < requiredIndices) {\n        return allocBuffer()\n    }\n\n    return lastBuffer\n}\n\nfunction allocAtlas(buffer: DrawCallBuffer): Atlas {\n    const texture = gl.createTexture()\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, ATLAS_SIZE, ATLAS_SIZE, 0, gl.RGBA, gl.UNSIGNED_BYTE, undefined)\n\n    // Create and bind the framebuffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    \n    const shelf = new (window as any).ShelfPack(ATLAS_SIZE, ATLAS_SIZE, { autoResize: false })\n\n    const atlas = {\n        texture,\n        frameBuffer,\n        shelf,\n        renderInCount: 0,\n    } as Atlas\n\n    buffer.atlases.push(atlas)\n\n    return atlas\n}\n\nfunction tryFindSpaceForTexture(atlas: Atlas, width: number, height: number) {\n    const bin = atlas.shelf.packOne(width, height)\n    return bin\n}\n\nfunction getSpaceInAtlas(buffer: DrawCallBuffer, width: number, height: number): SpaceInAtlas {\n    for (let i = 0; i < buffer.atlases.length; i++) {\n        const atlas = buffer.atlases[i]\n        const space = tryFindSpaceForTexture(atlas, width, height)\n        if (space) {\n            return {\n                atlas,\n                space\n            }\n        }\n    }\n    const atlas = allocAtlas(buffer)\n    const space = tryFindSpaceForTexture(atlas, width, height)\n    return {\n        atlas,\n        space\n    }\n}\n\ntype AtlasQueueEntry = {\n    space: Bin\n    image: ImageSource\n}\n\nconst atlasGenerationQueue = new Map<Atlas, AtlasQueueEntry[]>()\n\nfunction addRenderToAtlasQueue(atlas: Atlas, space: Bin, image: ImageSource): void {\n    debugTextureWithoutAtlasesMemoryCount += (image.width * image.height * 4)\n\n    let entries = atlasGenerationQueue.get(atlas)\n    if (!entries) {\n        entries = []\n        atlasGenerationQueue.set(atlas, entries)\n    }\n    entries.push({\n        space,\n        image\n    })\n}\n\nfunction processAtlasGenerationQueue(): void {\n    if (atlasGenerationQueue.size < 1) {\n        return\n    }\n\n    console.time('atlas processing')\n\n    fillTexturesWithDummy(1);\n    gl.viewport(0, 0, ATLAS_SIZE, ATLAS_SIZE);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, atlasQuadsIndices);\n    describeVerticesForAtlas(atlasQuads, atlasQuadsDestUVs)\n\n    atlasGenerationQueue.forEach((entries, atlas) => {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, atlas.frameBuffer);\n\n        for (let i = 0; i < entries.length; i += 16) {\n            const entriesCount = Math.min(entries.length - i, 16);\n            for (let j = 0; j < entriesCount; j++) {\n                const { space, image } = entries[i + j];\n\n                const uv = [\n                    0, 0,\n                    1, 0,\n                    0, 1,\n                    1, 1,\n                ]\n\n                const offsetX = -1 + space.x / (ATLAS_SIZE / 2)\n                const offsetY = -1 + space.y / (ATLAS_SIZE / 2)\n                const scaleX = image.width / (ATLAS_SIZE / 2)\n                const scaleY = image.height / (ATLAS_SIZE / 2)\n\n                let bufferIndex = j * (4 * 4);\n                for (let k = 0; k < uv.length; k += 2) {\n                    const u = uv[k + 0] * scaleX + offsetX\n                    const v = uv[k + 1] * scaleY + offsetY\n\n                    atlasQuadsDestUVsBuffer[bufferIndex + 0] = u;\n                    atlasQuadsDestUVsBuffer[bufferIndex + 1] = v;\n\n                    bufferIndex += 4;\n                }\n\n                const imageTexture = gl.createTexture()\n                gl.activeTexture(gl.TEXTURE0 + j);\n                gl.bindTexture(gl.TEXTURE_2D, imageTexture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, atlasQuadsDestUVs);\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, atlasQuadsDestUVsBuffer);\n\n            gl.drawElements(gl.TRIANGLES, entriesCount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    })\n    atlasGenerationQueue.clear()\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0.0, 0.0, canvas.width, canvas.height);\n\n    console.timeEnd('atlas processing')\n}\n\nfunction downloadBase64File(contentBase64, fileName) {\n    const linkSource = contentBase64;\n    const downloadLink = document.createElement('a');\n    document.body.appendChild(downloadLink);\n\n    downloadLink.href = linkSource;\n    downloadLink.target = '_self';\n    downloadLink.download = fileName;\n    downloadLink.click();\n\n    document.body.removeChild(downloadLink);\n}\n\nfunction debugOutputAtlas(atlas: Atlas): void {\n    const width = ATLAS_SIZE\n    const height = ATLAS_SIZE\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, atlas.frameBuffer);\n    const canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n    const context = canvas.getContext('2d')\n    const imageData = context.createImageData(width, height)\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, imageData.data);\n    context.putImageData(imageData, 0, 0)\n    const str = canvas.toDataURL('image/jpeg', 0.1)\n    downloadBase64File(str, 'atlas.jpeg')\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n}\n\nfunction debugOutputAtlasPng(atlas: Atlas): void {\n    const width = ATLAS_SIZE\n    const height = ATLAS_SIZE\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, atlas.frameBuffer);\n    const canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n    const context = canvas.getContext('2d')\n    const imageData = context.createImageData(width, height)\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, imageData.data);\n    context.putImageData(imageData, 0, 0)\n    const str = canvas.toDataURL('image/png')\n    downloadBase64File(str, 'atlas.png')\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n}\n\n// shader util\n\nfunction compileShader(name, uniforms, attributes) {\n    const vertexShaderCode = document.getElementById(name + '.vert').textContent;\n    const fragmentShaderCode = document.getElementById(name + '.frag').textContent;\n\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    gl.shaderSource(vertexShader, vertexShaderCode);\n    gl.shaderSource(fragmentShader, fragmentShaderCode);\n\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n        throw (\"ERROR compiling vertex shader for \" + name + \"!\\n\" +\n            gl.getShaderInfoLog(vertexShader))\n    }\n\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n        throw (\"ERROR compiling fragment shader for \" + name + \"!\\n\" +\n            gl.getShaderInfoLog(fragmentShader))\n    }\n\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw (\"ERROR linking program!\\n\" + gl.getProgramInfoLog(program));\n    }\n    gl.validateProgram(program);\n    if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n        throw (\"ERROR validating program!\\n\" + gl.getProgramInfoLog(program));\n    }\n\n    const instance = {\n        program: program,\n\n        use: function () {\n            gl.useProgram(this.program);\n        },\n    };\n\n    uniforms.forEach(function (uniform) {\n        instance[uniform] = gl.getUniformLocation(program, uniform);\n    });\n\n    attributes.forEach(function (attribute) {\n        instance[attribute] = gl.getAttribLocation(program, attribute);\n    });\n\n    return instance;\n}\n\n// deterministic random\n\nfunction xmur3(str) {\n    for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        var t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\nvar rand;\n\nfunction initRand() {\n    // Create xmur3 state:\n    const seed = xmur3(\"apples\");\n    // Output four 32-bit hashes to provide the seed for sfc32.\n    rand = sfc32(seed(), seed(), seed(), seed());\n}\n\nfunction randomRange(min, max) {\n    return min + rand() * (max - min);\n}\n\n// web-gl debug\n\nfunction glEnumToString(gl, value) {\n    // Optimization for the most common enum:\n    if (value === gl.NO_ERROR) {\n        return \"NO_ERROR\";\n    }\n    for (const p in gl) {\n        if (gl[p] === value) {\n            return p;\n        }\n    }\n    return \"0x\" + value.toString(16);\n}\n\nfunction createGLErrorWrapper(context, fname) {\n    return function() {\n        const rv = context[fname].apply(context, arguments);\n        const err = context.getError();\n        if (err !== context.NO_ERROR) {\n            throw \"GL error \" + glEnumToString(context, err) + \" in \" + fname;\n        }\n        return rv;\n    };\n}\n\nfunction create3DContextWithWrapperThatThrowsOnGLError(context: WebGLRenderingContext): WebGLRenderingContext {\n    const wrap = {} as any;\n    for (const i in context) {\n        try {\n            if (typeof context[i] === 'function') {\n                wrap[i] = createGLErrorWrapper(context, i);\n            } else {\n                wrap[i] = context[i];\n            }\n        } catch (e) {\n            throw new Error(\"createContextWrapperThatThrowsOnGLError: Error accessing \" + i);\n        }\n    }\n    wrap.getError = function() {\n        return context.getError();\n    };\n    return wrap as WebGLRenderingContext;\n}\n\n// controls\n\nlet isDown = false;\nlet lastX = 0\nlet lastY = 0\n\nfunction controls_mousedown(e) {\n    if (e.button === 0) {\n        isDown = true\n    }\n    lastX = e.clientX;\n    lastY = e.clientY;\n}\nfunction controls_mouseup(e) {\n    if (e.button === 0) {\n        isDown = false\n    }\n    lastX = e.clientX;\n    lastY = e.clientY;\n}\n\nfunction moveCameraBy(dx, dy) {\n    cameraX -= dx / scale * devicePixelRatio;\n    cameraY -= dy / scale * devicePixelRatio;\n}\n\nfunction screenToWorld(x, y) {\n    return [\n        x / scale - cameraX,\n        y / scale - cameraY\n    ]\n}\n\nfunction scaleCameraBy(s) {\n    const screenX = lastX * window.devicePixelRatio - canvas.width / 2;\n    const screenY = lastY * window.devicePixelRatio - canvas.height / 2;\n\n    const [ x0, y0 ] = screenToWorld(screenX, screenY);\n    \n    scale = Math.max(0.01, Math.min(100, scale / (1 + Math.min(Math.max(-0.999, s / 100), 0.999))));\n\n    const [ x1, y1 ] = screenToWorld(screenX, screenY);\n\n    const dx = x1 - x0\n    const dy = y1 - y0\n\n    cameraX -= dx;\n    cameraY -= dy;\n}\n\nfunction controls_mousemove(e) {\n    const x = e.clientX;\n    const y = e.clientY;\n    if (isDown) {\n        const dx = x - lastX;\n        const dy = y - lastY;\n\n        moveCameraBy(dx, dy)\n    }\n    lastX = x;\n    lastY = y;\n}\n\nfunction controls_wheel(e) {\n    const isTouchPad = e.wheelDeltaY ? e.wheelDeltaY === -3 * e.deltaY : e.deltaMode === 0\n\n    if (isTouchPad) {\n        moveCameraBy(e.deltaX, e.deltaY)\n    } else {\n        scaleCameraBy(e.deltaY)\n    }\n    \n    e.preventDefault()\n}"],"names":[],"version":3,"file":"index.fb5312c9.js.map","sourceRoot":"/__parcel_source_root/"}